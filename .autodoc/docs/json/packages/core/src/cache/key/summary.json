{
  "folderName": "key",
  "folderPath": ".autodoc/docs/json/packages/core/src/cache/key",
  "url": "https://github.com/igorkamyshev/farfetched/.autodoc/docs/json/packages/core/src/cache/key",
  "files": [
    {
      "fileName": "key.ts",
      "filePath": "packages/core/src/cache/key/key.ts",
      "url": "https://github.com/igorkamyshev/farfetched/packages/core/src/cache/key/key.ts",
      "summary": "The code provided is a module that contains functions related to creating unique keys for caching purposes in the larger \"farfetched\" project. \n\nThe `createKey` function takes in an object as its parameter, which includes three properties: `sid`, `params`, and `sources`. The `sid` property is a string, while `params` and `sources` are arrays of unknown types. The function first calls the `stableStringify` function from the `stable_stringify` module, passing in the `params`, `sources`, and `sid` properties. The `stableStringify` function converts the object into a stable string representation. If the `stableStringify` function returns a non-null value, the `sha1` function from the `hash` module is called with the stable string as its parameter. The `sha1` function returns a unique hash value based on the input string. This hash value is then returned as the result of the `createKey` function. If any errors occur during the process, the function catches the error and returns `null`.\n\nThe `queryUniqId` function takes in a `query` object as its parameter. It first calls the `querySid` function, which extracts the `sid` property from the `query` object's `__.meta` property. If the `sid` property exists, it is returned as the unique ID. If the `sid` property does not exist, the function calls the `queryUniqName` function. The `queryUniqName` function extracts the `name` property from the `query` object's `__.meta` property. If the `name` property has been previously encountered (stored in the `prevNames` set), `null` is returned. Otherwise, the `name` property is added to the `prevNames` set, and the `name` property is returned as the unique ID.\n\nIf neither the `sid` nor the `name` properties exist in the `query` object's `__.meta` property, an error is thrown with a message indicating that either the `sid` or the unique name is required for caching.\n\nOverall, this module provides functions for generating unique keys for caching based on the properties of a `query` object. These keys can be used in the larger \"farfetched\" project to cache and retrieve data efficiently.",
      "questions": "1. **What is the purpose of the `createKey` function?**\nThe `createKey` function takes in an object with `sid`, `params`, and `sources` properties and returns a string or null. It likely generates a unique key based on the input values for caching purposes.\n\n2. **What is the purpose of the `queryUniqId` function?**\nThe `queryUniqId` function takes in a `query` object and returns a string representing the unique identifier for the query. If the query does not have a `sid` or a unique name, it throws an error.\n\n3. **What is the purpose of the `querySid` and `queryUniqName` functions?**\nThe `querySid` function extracts the `sid` property from a `query` object and returns it as a string or null. The `queryUniqName` function extracts the `name` property from a `query` object and returns it as a string or null. These functions are likely used to retrieve identifying information from the `query` object for caching or other purposes."
    }
  ],
  "folders": [],
  "summary": "The `key.ts` module in the `core/src/cache/key` directory of the farfetched project provides functions for generating unique keys for caching purposes. These keys are based on the properties of a `query` object and can be used to cache and retrieve data efficiently within the project.\n\nThe `createKey` function is a key part of this module. It takes in an object with `sid`, `params`, and `sources` properties. The function uses the `stableStringify` function to convert these properties into a stable string representation. If successful, the `sha1` function from the `hash` module is used to generate a unique hash value from the string, which is then returned as the result. If any errors occur, the function returns `null`.\n\n```typescript\nconst key = createKey({ sid: '123', params: ['param1', 'param2'], sources: ['source1', 'source2'] });\n```\n\nThe `queryUniqId` function is another important function in this module. It takes in a `query` object and attempts to extract a unique ID from it. It first tries to extract the `sid` property from the `query` object's `__.meta` property. If the `sid` property does not exist, it tries to extract the `name` property. If the `name` property has been previously encountered, `null` is returned. Otherwise, the `name` property is returned as the unique ID.\n\n```typescript\nconst uniqId = queryUniqId({ __: { meta: { sid: '123', name: 'query1' } } });\n```\n\nIf neither the `sid` nor the `name` properties exist in the `query` object's `__.meta` property, an error is thrown. This ensures that every `query` object used for caching has a unique identifier, either in the form of a `sid` or a unique `name`.\n\nThese functions are crucial for the efficient caching and retrieval of data in the farfetched project. By generating unique keys for each `query` object, the project can avoid unnecessary data duplication and improve performance.",
  "questions": ""
}
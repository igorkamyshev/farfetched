{
  "fileName": "retry.ts",
  "filePath": "packages/core/src/retry/retry.ts",
  "url": "https://github.com/igorkamyshev/farfetched/packages/core/src/retry/retry.ts",
  "summary": "The code provided is a function called `retry` that is used to implement retry logic for remote operations. It is part of a larger project called \"farfetched\". \n\nThe purpose of this code is to allow developers to retry failed remote operations with customizable retry configurations. It takes in a remote operation `operation` and a configuration object `params` that specifies the retry behavior. The function then sets up the necessary event handlers and stores to implement the retry logic.\n\nThe `retry` function first normalizes the `times` parameter to ensure it is a static or reactive value. It then creates a store `$attempt` to keep track of the current attempt number, starting with 1. The `$meta` store combines the `$attempt` store to provide metadata about the current attempt.\n\nThe function also creates an event `failed` that is triggered when a remote operation fails. This event contains information about the failed operation, such as the parameters, error, and execution metadata.\n\nThe function sets up a `newAttempt` event that is triggered whenever a new attempt should be made. This event is used to increment the `$attempt` store.\n\nThe function uses the `split` function from the `effector` library to split the `failed` event into two branches: `planNextAttempt` and `retriesAreOver`. The `planNextAttempt` branch is taken when the current attempt is less than or equal to the maximum number of attempts specified in the `times` parameter. This branch plans the next attempt by combining the failed operation parameters, error, and metadata. The `retriesAreOver` branch is taken when the maximum number of attempts has been reached.\n\nThe function then uses the `sample` function to delay the execution of the next attempt. It combines the `planNextAttempt` event with the `timeout` parameter to determine the delay duration. The `timeout` parameter can be a static or reactive value. The delayed execution triggers the `newAttempt` event and the `startWithMeta` event of the `operation` to initiate the next attempt.\n\nThe function updates the `$attempt` store by incrementing it whenever a new attempt is made. It also resets the `$attempt` store when the `operation` is successfully finished or started again.\n\nIf the `otherwise` parameter is provided in the `params` object, the function samples the `retriesAreOver` event and triggers the `otherwise` event.\n\nIf the `supressIntermediateErrors` parameter is set to `true`, the function modifies the behavior of the `operation` by wrapping its `dataSourceRetrieverFx` effect. It uses the `attach` function to attach the `$supressError` store to the effect's options. This allows the effect to suppress errors and retry the operation without propagating the error further. If an error occurs and is suppressed, the `failed` event is triggered with the relevant information.\n\nOverall, this code provides a reusable function for implementing retry logic for remote operations in the larger \"farfetched\" project. Developers can customize the retry behavior by providing different configurations for the `retry` function.",
  "questions": "1. **What is the purpose of the `retry` function?**\nThe `retry` function is used to implement retry logic for a remote operation. It retries the operation a specified number of times with a delay between each attempt.\n\n2. **What are the parameters of the `retry` function and what do they represent?**\nThe parameters of the `retry` function include `operation`, which represents the remote operation to be retried, and `times`, which represents the number of times the operation should be retried. Other parameters include `delay`, `filter`, and `mapParams`, which are used to configure the retry behavior.\n\n3. **What is the purpose of the `failed` event?**\nThe `failed` event is triggered when a retry attempt fails. It contains information about the failed attempt, including the parameters, error, and execution meta."
}